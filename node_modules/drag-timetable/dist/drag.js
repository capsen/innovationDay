'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TimetableDraggable = function () {
  function TimetableDraggable(taskId, element, dragManager, callbacks) {
    (0, _classCallCheck3.default)(this, TimetableDraggable);

    this.taskId = taskId;
    this.element = element;
    this.dragManager = dragManager;
    this.isDragging = false;
    this.element.onmousedown = this.onTouchStart.bind(this);
    window.addEventListener('mousemove', this.onTouchMove.bind(this), false);
    window.addEventListener('mouseup', this.onTouchEnd.bind(this), false);
  }

  (0, _createClass3.default)(TimetableDraggable, [{
    key: 'onTouchStart',
    value: function onTouchStart(ev) {
      this.isDragging = true;
      var boundingRect = ev.currentTarget.getBoundingClientRect();
      this.startOffsetX = ev.clientX - boundingRect.left;
      this.startOffsetY = ev.clientY - boundingRect.top;
      this.startTouchTime = new Date().getTime();
      this.currentGhostElement = this.element.cloneNode(true);
      this.currentGhostElement.style.position = 'absolute';
      this.currentGhostElement.style.left = ev.pageX - this.startOffsetX + "px";
      this.currentGhostElement.style.top = ev.pageY - this.startOffsetY + "px";
      this.currentGhostElement.style.width = this.element.clientWidth + "px";
      this.currentGhostElement.style.height = this.element.clientHeight + "px";
      document.body.appendChild(this.currentGhostElement);
      this.dragManager.spacer.moveStart(this.taskId);
      return false;
    }
  }, {
    key: 'onTouchEnd',
    value: function onTouchEnd(ev) {
      if (this.isDragging) {
        this.isDragging = false;
        if (new Date().getTime() - this.startTouchTime < this.dragManager.clickThreshold) {
          this.dragManager.callbacks.onTaskClick(this.taskId);
        }
        if (this.currentGhostElement) {
          this.currentGhostElement.outerHTML = '';
          this.currentGhostElement = null;
        }
        this.dragManager.spacer.moveEnd(this.taskId);
      }
    }
  }, {
    key: 'onTouchMove',
    value: function onTouchMove(ev) {
      if (this.isDragging) {
        if (this.currentGhostElement) {
          this.currentGhostElement.style.left = ev.pageX - this.startOffsetX + "px";
          this.currentGhostElement.style.top = ev.pageY - this.startOffsetY + "px";
        }
        var scrollOffset = window.pageYOffset || document.documentElement.scrollTop;
        this.dragManager.spacer.moveUpdate(ev.pageY - this.startOffsetY - scrollOffset, this.taskId);
      }
    }
  }]);
  return TimetableDraggable;
}();

var TimetableDragManager = function () {
  function TimetableDragManager(unitHeight, spacer, callbacks, clickThreshold) {
    (0, _classCallCheck3.default)(this, TimetableDragManager);

    this.callbacks = callbacks;
    this.unitHeight = unitHeight;
    this.spacer = spacer;
    this.clickThreshold = clickThreshold;
    this.taskElements = {};
  }

  (0, _createClass3.default)(TimetableDragManager, [{
    key: 'attachToTaskElement',
    value: function attachToTaskElement(taskId, element) {
      var draggable = new TimetableDraggable(taskId, element, this);
      this.taskElements[taskId] = draggable;
    }
  }, {
    key: 'detachToTaskElement',
    value: function detachToTaskElement(taskId, element) {}
  }]);
  return TimetableDragManager;
}();

exports.default = TimetableDragManager;