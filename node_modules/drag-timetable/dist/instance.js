'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _task = require('./task.js');

var _task2 = _interopRequireDefault(_task);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TimetableInstance = function () {
  function TimetableInstance(contextObj) {
    (0, _classCallCheck3.default)(this, TimetableInstance);

    this.contextObj = contextObj;
  }

  (0, _createClass3.default)(TimetableInstance, [{
    key: 'setMoveCallback',
    value: function setMoveCallback(moveCallback) {
      this.moveCallback = moveCallback;
    }
  }, {
    key: 'setClickCallback',
    value: function setClickCallback(clickCallback) {
      this.clickCallback = clickCallback;
    }
  }, {
    key: 'addTask',
    value: function addTask(task, isAddingToTimetable) {
      var newTask = new _task2.default(task, this.contextObj.taskAreaSize);
      this.contextObj.tasks[task.id] = newTask;
      this.contextObj.dragManager.attachToTaskElement(newTask.id, newTask.element);
      if (isAddingToTimetable) {
        this.contextObj.spacer.addToTable(newTask);
      }
      return newTask.element;
    }
  }, {
    key: 'removeTask',
    value: function removeTask(taskId) {
      this.contextObj.spacer.removeFromTable(this.contextObj.tasks[taskId]);
      this.contextObj.tasks[taskId] = undefined;
    }
  }, {
    key: 'onTaskTimeUpdate',
    value: function onTaskTimeUpdate(taskId, startTime, endTime) {
      this.contextObj.tasks[taskId].start = startTime;
      this.contextObj.tasks[taskId].end = endTime;
      if (this.moveCallback) {
        this.moveCallback(this.contextObj.tasks[taskId]);
      }
      this.contextObj.tasks[taskId].updateTaskUI();
    }
  }, {
    key: 'onTaskClick',
    value: function onTaskClick(taskId) {
      if (this.clickCallback) {
        this.clickCallback(this.contextObj.tasks[taskId]);
      }
    }
  }, {
    key: 'getTask',
    value: function getTask(taskId) {
      return this.contextObj.tasks[taskId];
    }
  }, {
    key: 'getTasks',
    value: function getTasks() {
      return this.contextObj.tasks;
    }
  }]);
  return TimetableInstance;
}();

exports.default = TimetableInstance;