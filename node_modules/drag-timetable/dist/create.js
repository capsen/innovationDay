'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _instance = require('./instance.js');

var _instance2 = _interopRequireDefault(_instance);

var _spacer = require('./spacer.js');

var _spacer2 = _interopRequireDefault(_spacer);

var _drag = require('./drag.js');

var _drag2 = _interopRequireDefault(_drag);

var _util = require('./util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TimetableCreator = function () {
  function TimetableCreator() {
    (0, _classCallCheck3.default)(this, TimetableCreator);
  }

  (0, _createClass3.default)(TimetableCreator, [{
    key: 'create',
    value: function create(container, options) {
      var hoursArray = this._getHoursArray(options.hourStart, options.hourEnd);

      var timetableContainer = document.createElement('div');
      timetableContainer.style.position = 'relative';

      options.hoursArray = hoursArray;

      var tableResult = this._createTable(options);

      timetableContainer.appendChild(tableResult.table);
      timetableContainer.appendChild(tableResult.taskArea);
      container.appendChild(timetableContainer);

      var contextObj = (0, _assign2.default)(tableResult, options);
      contextObj.tasks = {};

      var instance = new _instance2.default(contextObj);
      this._initSpacer(instance);
      this._initDrag(instance);
      return instance;
    }
  }, {
    key: '_createTable',
    value: function _createTable(options) {
      var table = document.createElement('table');

      table.setAttribute('class', 'dragtimetable-table');

      options.table = table;
      var taskArea = this._createVerticalTable(options);
      return { table: table, taskArea: taskArea };
    }
  }, {
    key: '_createVerticalTable',
    value: function _createVerticalTable(_ref) {
      var orientation = _ref.orientation,
          table = _ref.table,
          hoursArray = _ref.hoursArray,
          quarterHourAreaSize = _ref.quarterHourAreaSize,
          timeHeaderSize = _ref.timeHeaderSize,
          taskAreaSize = _ref.taskAreaSize;

      var taskarea = document.createElement('table');
      taskarea.style.position = 'absolute';
      taskarea.style.top = '0px';
      taskarea.style.left = timeHeaderSize;
      taskarea.style.boxSizing = 'border-box';
      taskarea.style.marginLeft = '4px';
      taskarea.style.width = taskAreaSize;
      taskarea.style.borderSpacing = '1px';
      taskarea.style.borderCollapse = 'collapse';

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(hoursArray), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var hour = _step.value;

          var hourBlock = document.createElement('tr');
          var hourHeader = document.createElement('th');
          var hourHeaderText = document.createElement('div');
          var taskCell = document.createElement('td');

          hourHeaderText.innerHTML = hour;
          hourHeader.style.width = timeHeaderSize;
          hourHeader.style.padding = '0px';
          hourHeader.setAttribute('rowspan', '4');
          hourHeaderText.setAttribute("class", "dragtimetable-headertext");
          hourHeader.appendChild(hourHeaderText);
          hourBlock.appendChild(hourHeader);
          taskCell.style.width = taskAreaSize;
          taskCell.style.padding = '0px';
          hourBlock.style.height = quarterHourAreaSize;
          hourBlock.appendChild(taskCell);
          table.appendChild(hourBlock);

          for (var i = 0; i < 3; i++) {
            var taskSplitRow = document.createElement('tr');
            var taskSplitCell = document.createElement('td');
            taskSplitCell.style.padding = '0px';
            taskSplitRow.style.height = quarterHourAreaSize;
            taskSplitRow.appendChild(taskSplitCell);
            table.appendChild(taskSplitRow);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return taskarea;
    }
  }, {
    key: '_getHoursArray',
    value: function _getHoursArray(hourStart, hourEnd) {
      var hours = [];
      if (hourStart < hourEnd) {
        for (var i = hourStart; i < hourEnd; i++) {
          hours.push(_util2.default.getHourText(i));
        }
      } else {
        for (var _i = hourStart; _i < 24; _i++) {
          hours.push(_util2.default.getHourText(_i));
        }
        for (var _i2 = 0; _i2 < hourEnd; _i2++) {
          hours.push(_util2.default.getHourText(_i2));
        }
      }
      return hours;
    }
  }, {
    key: '_initSpacer',
    value: function _initSpacer(instance) {
      var callbacks = {
        onTaskTimeUpdate: instance.onTaskTimeUpdate.bind(instance),
        getTask: instance.getTask.bind(instance)
      };
      instance.contextObj.spacer = new _spacer2.default(instance.contextObj.hourStart, instance.contextObj.hourEnd, instance.contextObj.taskArea, instance.contextObj.table, instance.contextObj.quarterHourAreaSize, instance.contextObj.orientation, callbacks);
    }
  }, {
    key: '_initDrag',
    value: function _initDrag(instance) {
      var callbacks = {
        onTaskClick: instance.onTaskClick.bind(instance)
      };
      instance.contextObj.dragManager = new _drag2.default(instance.quarterHourAreaSize, instance.contextObj.spacer, callbacks, instance.contextObj.clickThreshold);
    }
  }]);
  return TimetableCreator;
}();

exports.default = new TimetableCreator();